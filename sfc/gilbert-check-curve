#!/usr/bin/python3
#
# To the extent possible under law, the person who associated CC0 with
# this project has waived all copyright and related or neighboring rights
# to this project.
# 
# You should have received a copy of the CC0 legalcode along with this
# work. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
#


import os
import sys
import re

max_xyz = [-1,-1,-1]
prv_xyz = [-1, 0, 0]

VERBOSE_LEVEL = 0

PARITY_TYPE = "alpha"
cell_parity = -1
path_parity = -1

NOTCH_COUNT = 0
LINE_NO = 0

DUP_COUNT = 0
dup_map = {}

UNIQ_COUNT = 0
CELL_TOTAL = 0

COUNT_UNEXPECTED_ENDPOINT_AS_NOTCH = True

def show_help():
  print("\ngilbert-check-curve      A program to run some basic tests on space filling curves")
  print("")
  print("  usage:   gilbert-check-curve [help] [verbose] [notch-parity=(alpha|beta|gamma|diag|diag_ab|diag_ag|diag_bg)]")
  print("")
  print("    help             this screen")
  print("    verbose          increase verbosity level (can be issued multiple times)")
  print("    notch-parity=... set notch parity checking type")
  print("       alpha         endpoint on alpha (x) dimension")
  print("       beta          endpoint on beta (y) dimension")
  print("       gamma         endpoint on gamma (z) dimension")
  print("       diag          endpoint on opposite diagonal (alpha + beta + gamma)")
  print("       diag_ab       endpoint on alpha-beta plane diagonal (alpha + beta)")
  print("       diag_ag       endpoint on alpha-gamma plane diagonal (alpha + gamma)")
  print("       diag_bg       endpoint on beta-gamma plane diagonal (beta + gamma)")
  print("")
  print(" gilbet-check-curve takes from stdin either '<x> <y>' or '<x> <y> <z>' points that define the curve.")
  print(" gilbert-check-curve is not meant to be an all inclusive test of space filling cuves and only tests for:")
  print("")
  print("   * every cell has been hit within the rectangular cuboid defined by maximum and minimum seen values")
  print("   * every cell has been hit exactly once within the rectangular cuboid")
  print("   * there have been the appropriate number of diagonal moves (maximum 1 and value depending on the notch parity type)")
  print("")
  print(" gilbert-check-curve will return 0 on success and non-zero on error (curve failed check). Increase verbosity to see more")
  print(" information about the failure type")
  print("")

if (len(sys.argv) > 1):
  for arg in sys.argv[1:]:
    if arg == "verbose":
      VERBOSE_LEVEL += 1

    if arg == "help":
      show_help()
      sys.exit(0)

    if re.search( '^notch-parity', arg):
      tok = arg.split("=")
      if len(tok) == 2:
        if tok[1] == "alpha": PARITY_TYPE = "alpha"
        elif tok[1] == "beta": PARITY_TYPE = "beta"
        elif tok[1] == "gamma": PARITY_TYPE = "gamma"
        elif tok[1] == "diag": PARITY_TYPE = "diag"
        elif tok[1] == "diag_ab": PARITY_TYPE = "diag_ab"
        elif tok[1] == "diag_ag": PARITY_TYPE = "diag_ag"
        elif tok[1] == "diag_bg": PARITY_TYPE = "diag_bg"
        else :
          PARITY_TYPE = "value"
          path_parity = int(tok[1])



def _dist1(a,b):
  s = 0
  n = max( len(a), len(b) )
  for idx in range( max(len(a), len(b)) ):
    if (idx < len(a)) and (idx < len(b)):
      s += abs(a[idx] - b[idx])
    elif (idx < len(a)):
      s += abs(a[idx])
    else:
      s += abs(b[idx])
  return s

end_xyz = [-1,-1,-1]

for line in sys.stdin:
  LINE_NO += 1

  line = line.strip()
  if len(line)==0: continue
  if line[0] == '#': continue

  cur_xyz = [0,0,0]

  if (line in dup_map): DUP_COUNT += 1
  else: UNIQ_COUNT += 1
  dup_map[ line ] = 1

  tok = line.split(" ")

  if (len(tok) == 2):
    cur_xyz[0] = int(tok[0])
    cur_xyz[1] = int(tok[1])
  elif (len(tok) == 3):
    cur_xyz[0] = int(tok[0])
    cur_xyz[1] = int(tok[1])
    cur_xyz[2] = int(tok[2])
  else:
    sys.stderr.write("ERROR: expecting 2 or 3 coordinates, got" +  str(len(tok)) +  ", line:" + str(LINE_NO) +  "'" + line + "'")
    sys.exit(-1)

  max_xyz[0] = max(max_xyz[0], cur_xyz[0])
  max_xyz[1] = max(max_xyz[1], cur_xyz[1])
  max_xyz[2] = max(max_xyz[2], cur_xyz[2])

  d = _dist1(cur_xyz, prv_xyz)
  if (d > 1): NOTCH_COUNT += 1

  prv_xyz = cur_xyz

  end_xyz = cur_xyz


Nxyz = [ max_xyz[0]+1, max_xyz[1]+1, max_xyz[2]+1 ]

CELL_TOTAL = Nxyz[0]*Nxyz[1]*Nxyz[2]

cell_parity = CELL_TOTAL % 2

if    PARITY_TYPE == "alpha"  : path_parity = Nxyz[0] % 2
elif  PARITY_TYPE == "beta"   : path_parity = Nxyz[1] % 2
elif  PARITY_TYPE == "gamma"  : path_parity = Nxyz[2] % 2
elif  PARITY_TYPE == "diag"   : path_parity = (Nxyz[0] + Nxyz[1] + Nxyz[2] - 2) % 2
elif  PARITY_TYPE == "diag_ab": path_parity = (Nxyz[0] + Nxyz[1] - 1) % 2
elif  PARITY_TYPE == "diag_ag": path_parity = (Nxyz[0] + Nxyz[2] - 1) % 2
elif  PARITY_TYPE == "diag_bg": path_parity = (Nxyz[1] + Nxyz[2] - 1) % 2

expected_end_xyz = [0,0,0]
if    PARITY_TYPE == "alpha"  : expected_end_xyz[0] = max_xyz[0]
elif  PARITY_TYPE == "beta"   : expected_end_xyz[1] = max_xyz[1]
elif  PARITY_TYPE == "gamma"  : expected_end_xyz[2] = max_xyz[2]
elif  PARITY_TYPE == "diag"   : expected_end_xyz = max_xyz
elif  PARITY_TYPE == "diag_ab":
  expected_end_xyz[0] = max_xyz[0]
  expected_end_xyz[1] = max_xyz[1]
elif  PARITY_TYPE == "diag_ag":
  expected_end_xyz[0] = max_xyz[0]
  expected_end_xyz[2] = max_xyz[2]
elif  PARITY_TYPE == "diag_bg":
  expected_end_xyz[1] = max_xyz[1]
  expected_end_xyz[2] = max_xyz[2]

endpoint_error = 0

if ((expected_end_xyz[0] != end_xyz[0]) or
    (expected_end_xyz[1] != end_xyz[1]) or
    (expected_end_xyz[2] != end_xyz[2])):
  endpoint_error = 1
  if COUNT_UNEXPECTED_ENDPOINT_AS_NOTCH:
    NOTCH_COUNT += 1

expected_notch_count = (cell_parity + path_parity) % 2

d1_count = 0
for idx in range(3):
  if (Nxyz[idx] == 1): d1_count += 1

code = "ok"
#if ((DUP_COUNT > 0) or (NOTCH_COUNT  != parity) or (UNIQ_COUNT != CELL_TOTAL)):
if ((DUP_COUNT > 0) or
    (NOTCH_COUNT != expected_notch_count) or
    (UNIQ_COUNT != CELL_TOTAL)):
  code = "FAIL"


if (Nxyz[0] == 1): code = "unspec"

if (code == "FAIL"):
  if (VERBOSE_LEVEL > 0):
    sys.stderr.write("#" + str(code) + ": N[" + str(Nxyz[0]) + "x" +  str(Nxyz[1]) +  "x" + str(Nxyz[2]) +  "], notch:" +  str(NOTCH_COUNT) + \
          ", dup:" + str(DUP_COUNT) + ", path_parity:" + str(path_parity) + "(" + PARITY_TYPE +"), " + \
          "uniq:" + str(UNIQ_COUNT) + "(/" + str(CELL_TOTAL) +  ")" + " enderr:" + str(endpoint_error) + "\n")
  sys.exit(-1)
else:
  if (VERBOSE_LEVEL > 0):
    sys.stdout.write("#" + str(code) + ": N[" + str(Nxyz[0]) + "x" +  str(Nxyz[1]) +  "x" + str(Nxyz[2]) +  "], notch:" +  str(NOTCH_COUNT) + \
          ", dup:" + str(DUP_COUNT) + ", path_parity:" + str(path_parity) + "(" + PARITY_TYPE +"), " + \
          "uniq:" + str(UNIQ_COUNT) + "(/" + str(CELL_TOTAL) +  ")" + " enderr:" + str(endpoint_error) + "\n")
          #", dup:" + str(DUP_COUNT) + ", path_parity:" + str(path_parity) + ", uniq:" + str(UNIQ_COUNT) + "(/" + str(CELL_TOTAL) +  ")\n")

sys.exit(0)
